swagger: '2.0'
info:
  description: >-
    Це API системи сервісу для роботи аптеки в форматі OpenAPI версії 3.
  version: 1.0.0
  title: DrSmert
host: drsmert.com
basePath: /
tags:
  - name: medicine
    description: medicines and methods of interaction with them
  - name: store
    description: Access to DrSmert orders
  - name: user
    description: Operations about user
schemes:
  - http
paths:
  /medicine:
    post:
      tags:
        - medicine
      summary: Add a new medicine to the store
      description: ''
      operationId: addMed
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: medicine object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Med'
      responses:
        '405':
          description: Invalid input
        '403':
          description: Access denied
      security:
        - medstore_auth:
            - 'write:medicine'
            - 'read:medicine'
    put:
      tags:
        - medicine
      summary: Update an existing medicine
      description: ''
      operationId: updateMed
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Medicine object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Med'
      responses:
        '403':
          description: Access denied
        '400':
          description: Invalid ID supplied
        '404':
          description: Medicine not found
        '405':
          description: Validation exception
      security:
        - medstore_auth:
            - 'write:medicine'
            - 'read:medicine'
  /medicine/showDemand:
    get:
      tags:
        - medicine
      summary: Finds medicine by status "demand"
      operationId: findDemand
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Med'
        '400':
          description: Invalid status value
        '403':
          description: Access denied
      security:
        - medstore_auth:
            - 'write:medicine'
            - 'read:medicine'
  '/medicine/{medId}':
    get:
      tags:
        - medicine
      summary: Find medicine by ID
      description: Returns a single medicine
      operationId: getMedById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: medId
          in: path
          description: ID of pet to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Med'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
    post:
      tags:
        - medicine
      summary: Updates a medicine in the store with form data
      description: ''
      operationId: updateMedWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: medId
          in: path
          description: ID of medicine
          required: true
          type: integer
          format: int64
        - name: name
          in: formData
          description: Updated name of the medicine
          required: false
          type: string
        - name: status
          in: formData
          description: Updated status of the medicine
          required: false
          type: string
        - name: price
          in: formData
          description: Updated price of the medicine
          required: false
          type: integer
        - name: number
          in: formData
          description: Updated nubmer of the medicine
          required: false
          type: integer
          format: int64
      responses:
        '405':
          description: Invalid input
        '403':
          description: Access denied
      security:
        - medstore_auth:
            - 'write:medicine'
            - 'read:medicine'
    delete:
      tags:
        - medicine
      summary: Deletes a medicine
      description: ''
      operationId: deletePet
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: medId
          in: path
          description: Medicine id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Medicine not found
        '403':
          description: Access denied
      security:
        - medstore_auth:
            - 'write:medicine'
            - 'read:medicine'
  '/medicine/{medId}/uploadImage':
    post:
      tags:
        - medicine
      summary: uploads an image
      description: ''
      operationId: uploadFile
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: medId
          in: path
          description: ID of medicine to update
          required: true
          type: integer
          format: int64
        - name: additionalMetadata
          in: formData
          description: Additional data to pass to server
          required: false
          type: string
        - name: file
          in: formData
          description: file to upload
          required: false
          type: file
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
        '403':
          description: Access denied
      security:
        - medstore_auth:
            - 'write:medicine'
            - 'read:medicine'
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a medicine
      description: ''
      operationId: placeOrder
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: order placed for purchasing the medicine
          required: true
          schema:
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid Order
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      operationId: getOrderById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: orderId
          in: path
          description: ID of medicine that needs to be fetched
          required: true
          type: integer
          maximum: 10
          minimum: 1
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid ID supplied
        '403':
          description: Access denied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.        
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      produces:
        - application/xml
        - application/json
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          type: integer
          minimum: 1
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
        '403':
          description: Access denied
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operatioт
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
securityDefinitions:
  medstore_auth:
    type: oauth2
    authorizationUrl: 'http://medstore.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:medicine': modify pets in your account
      'read:medicine': read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      petId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
          - placed
          - approved
          - delivered
      complete:
        type: boolean
        default: false
    xml:
      name: Order
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Med:
    type: object
    required:
      - name
      - photoUrls
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: fuflomitsyn
      price:
        type: integer
        example: 00.00
      number:
        type: integer
        example: 0
      photoUrls:
        type: array
        xml:
          name: photoUrl
          wrapped: false
        items:
          type: string
      description:
        type: string
      demand:
        type: boolean
        example: True
    xml:
      name: Med
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
